function rational1_2(z)
    # Numerator coefficients
    p1_2 = (0.7200051154071883, -1.280202617747937, 0.7983496159444665, -0.17186939799833736, -0.011484733225624462, 0.00707544201513095, -0.000251111851494704, -7.53327525890514e-5, 4.2427149514309955e-6, 3.433750642444212e-7, -2.294067712958534e-8, -7.358238500370939e-10, 5.59387793103933e-11, 6.997247689609839e-13, -6.157382516519031e-14, -2.2001845901842144e-16, 2.4340819856181513e-17)
    # denominator coefficients
    q1_2 = (0.6581069291357678, -1.1322973937543537, 0.6834311272299731, -0.15028050191725864, 0.0005506134335181813, 0.002140600553537936, -9.305408840191707e-5, -7.171682652806533e-6, 3.901001707970679e-7, 3.4616117752185396e-9, -2.178223837404352e-10, 7.282278750379855e-12, -4.820102444382478e-13, 4.328463962235581e-15, -2.947679958310263e-16, 1.4376011078883083e-18, -8.249202994599666e-20, 2.5326446311222305e-22)
   # Map from (0,π/2) → (-1,1)
   x = 4z/π -1
   # Evaluate ratiional polynomial
   return (@evalpoly x p1_2...)/(@evalpoly x q1_2...)
end

function power1_2(z)
    alpha = 1//2
    x = 1 # x = gcd(2alpha, 1)
#   y = 1//1 # y = lcm(2alpha,1)

    c1_2 = (0, 0.3183098861837907, 0.25, -0.0353677651315323, -0.125, 0.012732395447351627, 0.08333333333333333, -0.00649612012619981, -0.0625, 0.003929751681281367, 0.05, -0.0026306602163949644, -0.041666666666666664, 0.0018834904507916608, 0.03571428571428571, -0.001414710605261292, -0.03125, 0.0011014182912933933, 0.027777777777777776, -0.0008817448370742125, -0.025, 0.0007217911251333121, 0.022727272727272728, -0.0006017200116895854, -0.020833333333333332, 0.0005092958178940651, 0.019230769230769232, -0.00043663907569792965, -0.017857142857142856, 0.0003784897576501673, 0.016666666666666666, -0.00033122776918188417, -0.015625)

    cz1_2 = (0, -0.3183098861837907, 0, 0.1061032953945969, 0, -0.06366197723675814, 0, 0.04547284088339867, 0, -0.0353677651315323, 0, 0.028937262380344612, 0, -0.024485375860291588, 0, 0.02122065907891938, 0, -0.018724110951987685, 0, 0.016753151904410037, 0, -0.015157613627799556, 0, 0.013839560268860466, 0, -0.012732395447351627, 0, 0.0117892550438441, 0, -0.010976202971854851, 0, 0.01026806084463841, 0)

    e = exp(im * x * z)
    ΣAΣB = @evalpoly e c1_2...

    f = e # f = exp(im*y*z)
    ΣABz = @evalpoly f cz1_2...

    return exp(-im * z * alpha / 2 + ΣAΣB + im*z*ΣABz) / sqrt(2)
end

function malyuzhinets_inner1_2(z)
    if imag(z) > 2
        return power1_2(z)
    else
        return rational1_2(z)
    end
end

# Aidi eq 4
function reduce_conj1_2(z)
    return conj(malyuzhinets1_2(conj(z)))
end
# Aidi eq 5
function reduce_even1_2(z)
    return malyuzhinets1_2(-z)
end
# Aidi eq 6
function reduce_prod1_2(z)
    alpha = 1/2
    return cos(alpha*(z-π/2))/malyuzhinets1_2(z-π)
end
# Aidi eq 7
function reduce_div1_2(f,z)
    alpha = 1/2
    return cot((z+(π/2)*(alpha+1)/alpha)/2)*malyuzhinets1_2(z-π/alpha)
end

function malyuzhinets1_2(z)
    zr,zi = reim(z)
    zr < -π/2 && return reduce_even1_2(z)
    zr >= π/2 && return reduce_prod1_2(z)
    zr < 0 && return reduce_even1_2(z)
    zi < 0 && return reduce_conj1_2(z)
    return malyuzhinets_inner1_2(z)
end
