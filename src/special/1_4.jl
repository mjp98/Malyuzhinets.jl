function rational1_4(z)
    # Numerator coefficients
    p1_4 = (
    0.7476497083986113,
    -1.0360344579195677,
     0.5609508969173354,
    -0.1365804772560513,
     0.00894306317063787,
     0.002019097749814718,
    -0.0002900623039232639,
    -7.430732837047581e-6,
     2.2924861178798623e-6,
     1.4332070960973385e-9,
    -8.813377402582448e-9,
     4.332022700321388e-11,
     1.899318893524177e-11,
    -9.656769822320105e-14,
    -2.3364718599657092e-14,
     8.512776435644322e-17,
     1.5478199179618723e-17,
    -2.9843485722232275e-20,
    -4.708002553047215e-21,
     2.664136036600553e-24,
     4.655466536693186e-25)
    # denominator coefficients
    q1_4 = (
    0.7281989830219662,
    -0.9964721199070093,
     0.5354209045011811,
    -0.13238798689440873,
     0.011048476559912779,
     0.0010143655949359921,
    -0.0001690631650748255,
    -1.733599803811129e-6,
     7.997728181756562e-7,
    -9.432919148867765e-10,
    -1.754253460400673e-9,
     3.4485553793038023e-12,
     1.7412292269529682e-12,
    -3.8736509695276395e-16,
    -4.436378368320799e-16,
    -1.3271777680998579e-18,
    -2.0340163548941808e-19,
    -4.1998149415429653e-22,
    -3.2442836834862943e-23,
    -6.76865774562787e-26,
    -2.505858743780543e-27,
    -5.279832031840687e-30)
   # Map from (0,π/2) → (-1,1)
   x = 4z/π -1
   # Evaluate ratiional polynomial
   return (@evalpoly x p1_4...)/(@evalpoly x q1_4...)
end

function power1_4(z)
    alpha = 1//4
    x = 1//2 # x = gcd(2alpha, 1)
#   y = 1//1 # y = lcm(2alpha,1)

    c1_4 = (0,
    0.7071067811865475,
    -0.15915494309189535,
    -0.2357022603955158,
    0.125,
    -0.1414213562373095,
    0.01768388256576615,
    0.10101525445522107,
    -0.0625,
    0.07856742013183861,
    -0.006366197723675813,
    -0.06428243465332249,
    0.041666666666666664,
    -0.05439282932204211,
    0.003248060063099905,
    0.04714045207910317,
    -0.03125,
    0.041594516540385144,
    -0.0019648758406406834,
    -0.03721614637823934,
    0.025,
    -0.03367175148507369,
    0.0013153301081974822,
    0.030743773095067282,
    -0.020833333333333332,
    0.0282842712474619,
    -0.0009417452253958304,
    -0.026189140043946204,
    0.017857142857142856,
    -0.024382992454708534,
    0.000707355302630646,
    0.022809896167307983,
    -0.015625)

    cz1_4 = (0,
    0.15915494309189535,
    0,
    -0.05305164769729845,
    0,
    0.03183098861837907,
    0,
    -0.022736420441699334,
    0,
    0.01768388256576615,
    0,
    -0.014468631190172306,
    0,
    0.012242687930145794,
    0,
    -0.01061032953945969
    )

    e = exp(im * x * z)
    ΣAΣB = @evalpoly e c1_4...

    f = e*e # f = exp(im*y*z)
    ΣABz = @evalpoly f cz1_4...

    return exp(-im * z * alpha / 2 + ΣAΣB + im*z*ΣABz) / sqrt(2)
end

function malyuzhinets_inner1_4(z)
    if imag(z) > 2
        return power1_4(z)
    else
        return rational1_4(z)
    end
end

# Aidi eq 4
function reduce_conj1_4(z)
    return conj(malyuzhinets1_4(conj(z)))
end
# Aidi eq 5
function reduce_even1_4(z)
    return malyuzhinets1_4(-z)
end
# Aidi eq 6
function reduce_prod1_4(z)
    alpha = 1/4
    return cos(alpha*(z-π/2))/malyuzhinets1_4(z-π)
end
# Aidi eq 7
function reduce_div1_4(f,z)
    alpha = 1/4
    return cot((z+(π/2)*(alpha+1)/alpha)/2)*malyuzhinets1_4(z-π/alpha)
end

function malyuzhinets1_4(z)
    zr,zi = reim(z)
    zr < -π/2 && return reduce_even1_4(z)
    zr >= π/2 && return reduce_prod1_4(z)
    zr < 0 && return reduce_even1_4(z)
    zi < 0 && return reduce_conj1_4(z)
    return malyuzhinets_inner1_4(z)
end
